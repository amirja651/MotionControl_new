; ================================
; PlatformIO Project Configuration
; ================================
[platformio]                                  ; Global PlatformIO settings
    default_envs = esp32dev_debug             ; Use debug env by default (easy development)

; -----------------------------------------------------------
; (Optional) Native test target – keep if you run unit tests
; -----------------------------------------------------------
[env:native]                                  ; Host-machine build for fast unit tests
    platform = native                         ; Build with host compiler
    ;test_framework = googletest               ; Use GoogleTest for unit tests
    ;build_flags =                             ; Extra compiler flags for native
    ;    -D USING_NATIVE=1                     ; Define to gate PC-only code paths
    lib_deps =                                ; Test-time Arduino stubs/mocks
        ArduinoFake                           ; Mock Arduino APIs for tests

; ------------------------------------------
; ESP32-WROOM-32 — Debug (development build)
; ------------------------------------------
[env:esp32dev_debug]                          ; Debug configuration for ESP32-WROOM-32
    platform = espressif32@6.2.0              ; Pin toolchain/platform for reproducible builds
    framework = arduino                       ; Use Arduino core on top of ESP-IDF
    board = esp32dev                          ; DevKitC profile (fits WROOM-32 modules)
    upload_protocol = esptool                 ; Flash via serial using esptool
    upload_speed = 460800                     ; Robust high speed; lower than 921600 to reduce errors
    monitor_speed = 115200                    ; Serial monitor baudrate
    monitor_filters = esp32_exception_decoder ; colorize
    monitor_eol = LF                          ; Use LF line endings in monitor
    monitor_encoding = UTF-8                  ; Ensure Unicode output displays correctly
    lib_deps =                                ; Project libraries (locked versions recommended)
        jbtronics/ESP32Console@^1.2.0         ; Simple interactive console over serial
        teemuatlut/TMCStepper
        waspinator/AccelStepper
    lib_ldf_mode = deep+                      ; Deep library dependency scanning
    lib_archive = true                        ; Link libraries as archives (smaller, cleaner)
    build_unflags =                           ; Remove any lower C++ standard forced by cores
        -std=gnu++11                          ; Drop C++11 (GNU) if present
        -std=c++11                            ; Drop C++11 if present
        -std=gnu++14                          ; Drop C++14 (GNU) if present
        -std=c++14                            ; Drop C++14 if present
    build_type = debug                        ; Enable debug symbols in build system
    build_flags =                             ; Compiler/linker flags and project defines
        -std=gnu++17                          ; Use C++17 with GNU extensions
        -g3                                   ; Maximum debug info for better backtraces
        -O0                                   ; No optimization (stepping-friendly)
        ;-Wall                                 ; Enable common warnings
        ;-Wextra                               ; Enable extra warnings
        ;-Werror                               ; Treat warnings as errors (keeps code clean)
        -Wno-error=implicit-fallthrough       ; But do not fail build on switch fallthrough
        -Wno-unknown-pragmas                  ; Ignore unknown #pragmas from other compilers
        -ffunction-sections                   ; Put each function in its own section
        -fdata-sections                       ; Put each data object in its own section
        -Wl,--gc-sections                     ; Linker: drop unused sections to shrink binary
        -mlongcalls                           ; Xtensa: allow far function calls (flash)
        -mtext-section-literals               ; Place literals in text section (ESP32 quirk)
        -fno-exceptions                       ; Disable C++ exceptions (saves flash/IRAM)
        -fexceptions
        -D CORE_DEBUG_LEVEL=5                 ; Verbose Arduino log level (0..5)
        -D DEBUG                              ; Generic debug define for your code
        -I include                            ; Add local 'include/' to header search path

; ---------------------------------------
; ESP32-WROOM-32 — Release (production)
; ---------------------------------------
[env:esp32dev_release]                        ; Optimized configuration for production
    platform = espressif32@6.2.0              ; Same platform version as debug
    framework = arduino                       ; Arduino core
    board = esp32dev                          ; DevKitC profile (WROOM-32)
    upload_protocol = esptool                 ; Serial flashing
    upload_speed = 460800                     ; Stable fast upload
    monitor_speed = 115200                    ; Serial baudrate for logs (can lower in production)
    monitor_filters = esp32_exception_decoder
    lib_deps = 
        jbtronics/ESP32Console@^1.2.0         ; Same dependencies as debug
    lib_ldf_mode = deep+                      ; Deep dependency scanning
    lib_archive = true                        ; Archive libs for smaller firmware
    build_unflags =                           ; Clear lower C++ standards if injected
        -std=gnu++11
        -std=c++11
        -std=gnu++14
        -std=c++14
    build_type = release                      ; Inform PlatformIO we want an optimized build
    build_flags =                             ; Performance/size oriented flags
        -std=gnu++17                          ; C++17 with GNU extensions
        -Os                                   ; Optimize for size (good balance on ESP32)
        -g1                                   ; Minimal symbols (enough for decoder)
        -Wall                                 ; Common warnings
        -Wextra                               ; Extra warnings
        -Wno-unknown-pragmas                  ; Ignore foreign pragmas
        -ffunction-sections                   ; Function-level sections
        -fdata-sections                       ; Data-level sections
        -Wl,--gc-sections                     ; Drop unused code/data
        -mlongcalls                           ; Allow far calls
        -mtext-section-literals               ; Place literals in text section
        -fno-exceptions                       ; No C++ exceptions (smaller, faster)
        -D CORE_DEBUG_LEVEL=1                 ; Lower log verbosity in production
        -D NDEBUG                             ; Disable asserts in standard headers
        -I include                            ; Local headers path
